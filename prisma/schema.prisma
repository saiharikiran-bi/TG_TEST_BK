generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model bills {
  id                Int              @id @default(autoincrement())
  billNumber        String           @unique
  meterId           Int
  consumerId        Int
  billMonth         Int
  billYear          Int
  fromDate          DateTime
  toDate            DateTime
  dueDate           DateTime
  previousReading   Float
  currentReading    Float
  unitsConsumed     Float
  fixedCharge       Float
  energyCharge      Float
  powerFactorCharge Float?
  otherCharges      Json?
  subTotal          Float
  taxes             Json
  totalAmount       Float
  status            BillStatus       @default(GENERATED)
  isPaid            Boolean          @default(false)
  paidAmount        Float            @default(0)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime
  consumers         consumers        @relation(fields: [consumerId], references: [id])
  meters            meters           @relation(fields: [meterId], references: [id])
  meter_readings    meter_readings[]
  payments          payments[]
}

model consumer_documents {
  id                 Int                @id @default(autoincrement())
  consumerId         Int
  type               DocumentType
  number             String
  fileUrl            String
  verificationStatus VerificationStatus @default(PENDING)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime
  consumers          consumers          @relation(fields: [consumerId], references: [id])
}

model consumers {
  id                   Int                  @id @default(autoincrement())
  consumerNumber       String               @unique
  name                 String
  email                String?
  primaryPhone         String
  alternatePhone       String?
  idType               IdType
  idNumber             String
  connectionType       ConnectionType
  category             ConsumerCategory
  sanctionedLoad       Float
  connectionDate       DateTime
  locationId           Int                  @unique
  billingCycle         BillingCycle
  billDeliveryMode     BillDeliveryMode[]
  defaultPaymentMethod PaymentMethod?
  creditScore          Int?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime
  bills                bills[]
  consumer_documents   consumer_documents[]
  locations            locations            @relation("consumersToLocations", fields: [locationId], references: [id])
  notifications        notifications[]
  prepaid_accounts     prepaid_accounts?
}

model current_transformers {
  id               Int       @id @default(autoincrement())
  meterId          Int
  serialNumber     String    @unique
  manufacturer     String
  model            String
  ratedPrimary     Float
  ratedSecondary   Float
  accuracyClass    String
  burden           Float
  installationDate DateTime
  lastTestedDate   DateTime?
  nextTestDue      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime
  meters           meters    @relation(fields: [meterId], references: [id])
}

model departments {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  code        String        @unique
  description String?
  parentId    Int?
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  parent      departments?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children    departments[] @relation("DepartmentHierarchy")
  users       users[]
}

model dtr_faults {
  id             Int           @id @default(autoincrement())
  dtrId          Int
  faultType      FaultType
  severity       FaultSeverity
  occuredAt      DateTime
  resolvedAt     DateTime?
  description    String
  rootCause      String?
  resolution     String?
  affectedMeters Int?
  outageMinutes  Int?
  status         FaultStatus   @default(DETECTED)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime
  dtrs           dtrs          @relation(fields: [dtrId], references: [id])
}

model dtr_maintenance {
  id                Int               @id @default(autoincrement())
  dtrId             Int
  maintenanceType   MaintenanceType
  scheduledDate     DateTime
  completedDate     DateTime?
  workDone          String
  findings          String?
  recommendations   String?
  oilDielectricTest Float?
  oilAcidityTest    Float?
  moistureContent   Float?
  performedBy       String
  verifiedBy        String?
  status            MaintenanceStatus @default(SCHEDULED)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime
  dtrs              dtrs              @relation(fields: [dtrId], references: [id])
}

model dtr_readings {
  id                 Int            @id @default(autoincrement())
  dtrId              Int
  readingDate        DateTime
  readingType        DTRReadingType
  loadKVA            Float
  loadPercentage     Float
  primaryVoltage     Json
  secondaryVoltage   Json
  primaryCurrent     Json
  secondaryCurrent   Json
  powerFactor        Float?
  oilTemperature     Float?
  windingTemperature Float?
  ambientTemperature Float?
  frequency          Float?
  voltageUnbalance   Float?
  currentUnbalance   Float?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime
  dtrs               dtrs           @relation(fields: [dtrId], references: [id])

  @@index([dtrId, readingDate])
}

model dtrs {
  id                  Int               @id @default(autoincrement())
  dtrNumber           String            @unique
  serialNumber        String            @unique
  manufacturer        String
  model               String
  capacity            Float
  type                DTRType
  phase               Int
  primaryVoltage      Float
  secondaryVoltage    Float
  frequency           Float             @default(50)
  impedance           Float?
  coolingType         CoolingType
  oilType             OilType?
  oilCapacity         Float?
  locationId          Int
  installationDate    DateTime
  commissionDate      DateTime?
  lastMaintenanceDate DateTime?
  maxLoadLimit        Float?
  alarmThreshold      Float?
  tripThreshold       Float?
  status              DTRStatus         @default(ACTIVE)
  healthIndex         Int?
  temperature         Float?
  loadPercentage      Float?
  createdAt           DateTime          @default(now())
  updatedAt           DateTime
  dtr_faults          dtr_faults[]
  dtr_maintenance     dtr_maintenance[]
  dtr_readings        dtr_readings[]
  locations           locations         @relation("dtrsToLocations", fields: [locationId], references: [id])
  meters              meters[]
  tickets             tickets[]
}

model location_types {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  level       Int
  description String?
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  locations   locations[]
}

model locations {
  id              Int            @id @default(autoincrement())
  name            String
  code            String         @unique
  locationTypeId  Int
  parentId        Int?
  latitude        Float?
  longitude       Float?
  address         String?
  pincode         String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime
  consumers       consumers?          @relation("consumersToLocations")
  dtrs            dtrs[]            @relation("dtrsToLocations")
  location_types  location_types @relation(fields: [locationTypeId], references: [id])
  locations       locations?     @relation("locationsTolocations", fields: [parentId], references: [id])
  other_locations locations[]    @relation("locationsTolocations")
  meters          meters[]          @relation("metersToLocations")
  users           users[]           @relation("usersToLocations")
}

model login_history {
  id            Int      @id @default(autoincrement())
  userId        Int
  status        String
  ipAddress     String?
  deviceInfo    Json?
  location      String?
  failureReason String?
  createdAt     DateTime @default(now())
  users         users    @relation(fields: [userId], references: [id])
}

model meter_configurations {
  id               Int      @id @default(autoincrement())
  meterId          Int      @unique
  ctRatio          String
  ctRatioPrimary   Float
  ctRatioSecondary Float
  adoptedCTRatio   String?
  ctAccuracyClass  String?
  ctBurden         Float?
  ptRatio          String
  ptRatioPrimary   Float
  ptRatioSecondary Float
  adoptedPTRatio   String?
  ptAccuracyClass  String?
  ptBurden         Float?
  mf               Float
  vmf              Float
  cmf              Float
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  meters           meters   @relation(fields: [meterId], references: [id])
}

model meter_readings {
  id                   Int                    @id @default(autoincrement())
  meterId              Int
  readingDate          DateTime
  readingType          ReadingType
  readingSource        ReadingSource
  currentReading       Float
  previousReading      Float
  consumption          Float
  kWh                  Float
  kVAh                 Float?
  kVARh                Float?
  powerFactor          Float?
  averagePF            Float?
  minimumPF            Float?
  voltageR             Float?
  voltageY             Float?
  voltageB             Float?
  averageVoltage       Float?
  currentR             Float?
  currentY             Float?
  currentB             Float?
  averageCurrent       Float?
  isValid              Boolean                @default(true)
  validatedBy          String?
  validatedAt          DateTime?
  billId               Int?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  kVA                  Float?
  kW                   Float?
  bphPowerFactor       Float?
  frequency            Float?
  rphPowerFactor       Float?
  yphPowerFactor       Float?
  bills                bills?                 @relation(fields: [billId], references: [id])
  meters               meters                 @relation(fields: [meterId], references: [id])
  prepaid_transactions prepaid_transactions[]

  @@index([meterId, readingDate])
}

model meters {
  id                     Int                      @id @default(autoincrement())
  meterNumber            String                   @unique
  serialNumber           String                   @unique
  manufacturer           String
  model                  String
  type                   MeterType
  phase                  Int
  status                 MeterStatus              @default(ACTIVE)
  isInUse                Boolean                  @default(true)
  installationDate       DateTime
  lastMaintenanceDate    DateTime?
  decommissionDate       DateTime?
  locationId             Int
  dtrId                  Int?
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime
  bills                  bills[]
  current_transformers   current_transformers[]
  meter_configurations   meter_configurations?
  meter_readings         meter_readings[]
  dtrs                   dtrs?                    @relation(fields: [dtrId], references: [id])
  locations              locations                @relation("metersToLocations", fields: [locationId], references: [id])
  potential_transformers potential_transformers[]
  tamper_events          tamper_events[]

  @@index([dtrId])
}

model notifications {
  id         Int                   @id @default(autoincrement())
  consumerId Int
  type       NotificationType
  title      String
  message    String
  priority   NotificationPriority
  channels   NotificationChannel[]
  status     NotificationStatus    @default(PENDING)
  readAt     DateTime?
  createdAt  DateTime              @default(now())
  updatedAt  DateTime
  consumers  consumers             @relation(fields: [consumerId], references: [id])
}

model payments {
  id              Int           @id @default(autoincrement())
  transactionId   String        @unique
  billId          Int
  amount          Float
  paymentMode     PaymentMethod
  paymentStatus   PaymentStatus @default(PENDING)
  gatewayResponse Json?
  receiptNumber   String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  bills           bills         @relation(fields: [billId], references: [id])
}

model permissions {
  id               Int                @id @default(autoincrement())
  code             String             @unique
  name             String
  description      String?
  isActive         Boolean            @default(true)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  user_permissions user_permissions[]
}

model potential_transformers {
  id               Int       @id @default(autoincrement())
  meterId          Int
  serialNumber     String    @unique
  manufacturer     String
  model            String
  ratedPrimary     Float
  ratedSecondary   Float
  accuracyClass    String
  burden           Float
  installationDate DateTime
  lastTestedDate   DateTime?
  nextTestDue      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime
  meters           meters    @relation(fields: [meterId], references: [id])
}

model role_permissions {
  id           Int         @id @default(autoincrement())
  roleId       Int
  permissionId Json
  isGranted    Boolean     @default(true)
  restrictions Json?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime
  roles        roles       @relation(fields: [roleId], references: [id])

  @@unique([roleId, permissionId])
}

model roles {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  description      String?
  level            Int
  isSystem         Boolean            @default(false)
  isActive         Boolean            @default(true)
  accessLevel      AccessLevel
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  role_permissions role_permissions[]
  users            users[]
}

model tickets {
  id                                Int            @id @default(autoincrement())
  ticketNumber                      String         @unique
  dtrId                             Int?
  raisedById                        Int
  assignedToId                      Int?
  type                              TicketType
  category                          TicketCategory
  priority                          TicketPriority @default(MEDIUM)
  status                            TicketStatus   @default(OPEN)
  subject                           String
  description                       String
  resolution                        String?
  createdAt                         DateTime       @default(now())
  updatedAt                         DateTime
  users_tickets_assignedToIdTousers users?         @relation("tickets_assignedToIdTousers", fields: [assignedToId], references: [id])
  dtrs                              dtrs?          @relation(fields: [dtrId], references: [id])
  users_tickets_raisedByIdTousers   users          @relation("tickets_raisedByIdTousers", fields: [raisedById], references: [id])
}

model user_activity_logs {
  id        Int      @id @default(autoincrement())
  userId    Int
  action    String
  details   Json?
  ipAddress String?
  createdAt DateTime @default(now())
  users     users    @relation(fields: [userId], references: [id])
}

model user_permissions {
  id           Int         @id @default(autoincrement())
  userId       Int
  permissionId Int
  isGranted    Boolean     @default(true)
  reason       String?
  validFrom    DateTime    @default(now())
  validUntil   DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime
  permissions  permissions @relation(fields: [permissionId], references: [id])
  users        users       @relation(fields: [userId], references: [id])

  @@unique([userId, permissionId])
}

model user_sessions {
  id             Int      @id @default(autoincrement())
  userId         Int
  sessionToken   String   @unique
  deviceInfo     Json?
  ipAddress      String?
  location       String?
  isActive       Boolean  @default(true)
  lastActivityAt DateTime @default(now())
  expiresAt      DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  users          users    @relation(fields: [userId], references: [id])
}

model refresh_tokens {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model users {
  id                                  Int                  @id @default(autoincrement())
  username                            String               @unique
  email                               String               @unique
  password                            String
  firstName                           String
  lastName                            String
  phone                               String?
  profileImage                        String?
  isActive                            Boolean              @default(true)
  isLocked                            Boolean              @default(false)
  lastLoginAt                         DateTime?
  passwordChangedAt                   DateTime?
  failedLoginAttempts                 Int                  @default(0)
  lockoutUntil                        DateTime?
  departmentId                        Int?
  roleId                              Int?
  locationId                          Int?
  accessLevel                         AccessLevel          @default(NORMAL)
  createdAt                           DateTime             @default(now())
  updatedAt                           DateTime
  createdBy                           Int?
  updatedBy                           Int?
  login_history                       login_history[]
  tickets_tickets_assignedToIdTousers tickets[]            @relation("tickets_assignedToIdTousers")
  tickets_tickets_raisedByIdTousers   tickets[]            @relation("tickets_raisedByIdTousers")
  user_activity_logs                  user_activity_logs[]
  user_permissions                    user_permissions[]
  user_sessions                       user_sessions[]
  refresh_tokens                      refresh_tokens?
  departments                         departments?         @relation(fields: [departmentId], references: [id])
  roles                              roles?               @relation(fields: [roleId], references: [id])
  locations                          locations?           @relation("usersToLocations", fields: [locationId], references: [id])
}

model raw_xml_import {
  id          Int       @id @default(autoincrement())
  doc         String
  imported_at DateTime? @default(now()) @db.Timestamp(6)
}

model prepaid_accounts {
  id                    Int                    @id @default(autoincrement())
  consumerId            Int                    @unique
  accountNumber         String                 @unique
  currentBalance        Float                  @default(0)
  totalRecharged        Float                  @default(0)
  totalConsumed         Float                  @default(0)
  isActive              Boolean                @default(true)
  isBlocked             Boolean                @default(false)
  blockReason           String?
  blockedAt             DateTime?
  blockedBy             Int?
  lowBalanceThreshold   Float                  @default(50)
  emergencyThreshold    Float                  @default(10)
  autoRechargeEnabled   Boolean                @default(false)
  autoRechargeAmount    Float?
  autoRechargeThreshold Float?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime
  consumers             consumers              @relation(fields: [consumerId], references: [id])
  prepaid_alerts        prepaid_alerts[]
  prepaid_recharges     prepaid_recharges[]
  prepaid_transactions  prepaid_transactions[]
}

model prepaid_alerts {
  id                 Int               @id @default(autoincrement())
  accountId          Int
  alertType          PrepaidAlertType
  alertLevel         PrepaidAlertLevel
  message            String
  isRead             Boolean           @default(false)
  readAt             DateTime?
  balanceAtAlert     Float?
  consumptionAtAlert Float?
  thresholdValue     Float?
  createdAt          DateTime          @default(now())
  prepaid_accounts   prepaid_accounts  @relation(fields: [accountId], references: [id])

  @@index([accountId, createdAt])
}

model prepaid_recharges {
  id                   Int                   @id @default(autoincrement())
  accountId            Int
  rechargeId           String                @unique
  amount               Float
  paymentMethod        PaymentMethod
  paymentStatus        PaymentStatus         @default(PENDING)
  gatewayName          String?
  gatewayTransactionId String?
  gatewayResponse      Json?
  rechargeType         PrepaidRechargeType   @default(MANUAL)
  rechargeSource       PrepaidRechargeSource @default(ONLINE)
  isPromotional        Boolean               @default(false)
  promotionalCode      String?
  discountAmount       Float                 @default(0)
  bonusAmount          Float                 @default(0)
  receiptNumber        String?
  receiptUrl           String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime
  prepaid_accounts     prepaid_accounts      @relation(fields: [accountId], references: [id])

  @@index([accountId, createdAt])
  @@index([rechargeId])
}

model prepaid_transactions {
  id               Int                      @id @default(autoincrement())
  accountId        Int
  transactionId    String                   @unique
  transactionType  PrepaidTransactionType
  amount           Float
  balanceBefore    Float
  balanceAfter     Float
  consumptionKWh   Float?
  ratePerUnit      Float?
  fixedCharges     Float?
  taxes            Json?
  readingId        Int?
  status           PrepaidTransactionStatus @default(COMPLETED)
  failureReason    String?
  description      String?
  metadata         Json?
  createdAt        DateTime                 @default(now())
  updatedAt        DateTime
  prepaid_accounts prepaid_accounts         @relation(fields: [accountId], references: [id])
  meter_readings   meter_readings?          @relation(fields: [readingId], references: [id])

  @@index([accountId, createdAt])
  @@index([transactionId])
}

model tamper_code_desc {
  id         Int      @id @default(autoincrement())
  tamperCode Int      @unique
  tamperDesc String   @db.VarChar(100)
  createdAt  DateTime @default(now())
  updatedAt  DateTime
}

model tamper_events {
  id             Int          @id @default(autoincrement())
  meterId        Int
  tamperDatetime DateTime     @default(now())
  tamperType     TamperType
  tamperStatus   TamperStatus
  avgCurrent     Float?
  avgVoltage     Float?
  avgPowerFactor Float?
  frequency      Float?
  kwh            Float?
  kwhExport      Float?
  kwhImport      Float?
  kwhNet         Float?
  kwhTotal       Float?
  kwExport       Float?
  kwImport       Float?
  kvaExport      Float?
  kvaImport      Float?
  voltageR       Float?
  voltageY       Float?
  voltageB       Float?
  currentR       Float?
  currentY       Float?
  currentB       Float?
  powerFactorR   Float?
  powerFactorY   Float?
  powerFactorB   Float?
  tamperCount    Int?
  param1         Float?
  param2         Float?
  param3         Float?
  param4         Float?
  param5         Float?
  isProcessed    Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime
  meters         meters       @relation(fields: [meterId], references: [id])

  @@unique([meterId, tamperDatetime, tamperType, tamperStatus])
  @@index([meterId, tamperDatetime])
}



enum AccessLevel {
  RESTRICTED
  NORMAL
  ELEVATED
  ADMIN
  SUPER_ADMIN
}

enum BillDeliveryMode {
  EMAIL
  SMS
  WHATSAPP
  PHYSICAL
}

enum BillStatus {
  GENERATED
  VERIFIED
  APPROVED
  DISPUTED
  CANCELLED
}

enum BillingCycle {
  MONTHLY
  BIMONTHLY
  QUARTERLY
}

enum ConnectionType {
  RESIDENTIAL
  COMMERCIAL
  INDUSTRIAL
  AGRICULTURAL
}

enum ConsumerCategory {
  DOMESTIC
  SMALL_COMMERCIAL
  LARGE_COMMERCIAL
  INDUSTRIAL
  AGRICULTURAL
  GOVERNMENT
}

enum CoolingType {
  ONAN
  ONAF
  OFAF
  ODAF
}

enum DTRReadingType {
  REGULAR
  SPECIAL
  ALARM
  FAULT
}

enum DTRStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  FAULTY
  OVERLOADED
  DECOMMISSIONED
}

enum DTRType {
  DISTRIBUTION
  POWER
  AUTO
  SPECIAL_PURPOSE
}

enum FaultSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum FaultStatus {
  DETECTED
  ANALYZING
  REPAIRING
  RESOLVED
  UNRESOLVED
}

enum FaultType {
  OVERLOAD
  SHORT_CIRCUIT
  EARTH_FAULT
  OIL_LEAK
  HIGH_TEMPERATURE
  LOW_OIL
  BUSHING_FAILURE
  WINDING_FAILURE
  OTHER
}

enum IdType {
  PASSPORT
  DRIVING_LICENSE
  NATIONAL_ID
  VOTER_ID
  TAX_ID
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DEFERRED
}

enum MaintenanceType {
  ROUTINE
  PREVENTIVE
  CORRECTIVE
  EMERGENCY
  OIL_TEST
  INSPECTION
}

enum MeterStatus {
  ACTIVE
  INACTIVE
  FAULTY
  DISCONNECTED
}

enum MeterType {
  PREPAID
  POSTPAID
}

enum NotificationChannel {
  SMS
  EMAIL
  PUSH
  WHATSAPP
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
}

enum NotificationType {
  BILL_GENERATED
  PAYMENT_DUE
  PAYMENT_RECEIVED
  LOW_BALANCE
  METER_DISCONNECTED
}

enum OilType {
  MINERAL
  SYNTHETIC
  BIO_BASED
  SILICONE
}

enum PaymentMethod {
  CASH
  CHEQUE
  CARD
  UPI
  NETBANKING
  WALLET
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
  REFUNDED
}

enum ReadingSource {
  AMR
  MANUAL
  MOBILE_APP
  ESTIMATED
}

enum ReadingType {
  REGULAR
  SPECIAL
  PROVISIONAL
  FINAL
}

enum TicketCategory {
  BILLING
  METER
  CONNECTION
  TECHNICAL
  OTHER
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  ASSIGNED
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum TicketType {
  COMPLAINT
  SERVICE_REQUEST
  INQUIRY
}

enum PaymentMode {
  UPI
  CREDIT_CARD
  NET_BANKING
  CASH
}

enum AlertLevel {
  LOW
  MEDIUM
  CRITICAL
}

model tariff {
  id                        Int            @id @default(autoincrement())
  client_id                 Int
  category                  Int
  tariff_name               String
  type                      String
  device                    String
  min_demand                Int?
  min_demand_unit_rate      Float?
  min_demand_excess_unit_rate Float?
  base_unit_rate            Float
  elec_duty_unit_rate       Float?
  ims                       Float?
  gst                       Float?
  valid_from                DateTime
  valid_to                  DateTime?
  created_at                DateTime       @default(now())
  updated_at                DateTime       @updatedAt
  tariff_slabs              tariff_slabs[]

  @@index([client_id])
  @@index([category])
  @@index([valid_from])
}

model tariff_slabs {
  id         Int      @id @default(autoincrement())
  tariff_id  Int
  slab_order Int
  unit_limit Int
  unit_rate  Float
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  tariff     tariff   @relation(fields: [tariff_id], references: [id], onDelete: Cascade)

  @@index([tariff_id])
  @@index([slab_order])
}

enum AlertType {
  LOW_BALANCE
  RECHARGE_SUCCESS
  BLOCKED
  THRESHOLD_REACHED
}

enum DocumentType {
  ID_PROOF
  ADDRESS_PROOF
  OWNERSHIP_PROOF
  NOC
  OTHER
}

enum PrepaidAlertLevel {
  INFO
  WARNING
  CRITICAL
  EMERGENCY
}

enum PrepaidAlertType {
  LOW_BALANCE
  EMERGENCY_LOW
  CONSUMPTION_HIGH
  RECHARGE_SUCCESS
  RECHARGE_FAILED
  DISCONNECTION_WARNING
  DISCONNECTED
  RECONNECTED
}

enum PrepaidRechargeSource {
  ONLINE
  OFFLINE
  MOBILE_APP
  SMS
  USSD
  AGENT
}

enum PrepaidRechargeType {
  MANUAL
  AUTO
  PROMOTIONAL
  REFUND
  ADMIN
}

enum PrepaidTransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REVERSED
}

enum PrepaidTransactionType {
  RECHARGE
  CONSUMPTION
  ADJUSTMENT
  REFUND
  PENALTY
  BONUS
  EXPIRY
  TRANSFER
}

enum TamperStatus {
  DETECTED
  CONFIRMED
  RESOLVED
  FALSE_ALARM
  INVESTIGATING
}

enum TamperType {
  METER_BYPASS
  MAGNETIC_TAMPER
  COVER_OPEN
  TERMINAL_TAMPER
  REVERSE_POLARITY
  PHASE_MISMATCH
  CURRENT_SHUNT
  VOLTAGE_SHUNT
  POWER_FAILURE
  NO_LOAD
  OTHER
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

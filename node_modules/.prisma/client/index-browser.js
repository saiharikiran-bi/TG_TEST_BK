
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.BillsScalarFieldEnum = {
  id: 'id',
  billNumber: 'billNumber',
  meterId: 'meterId',
  consumerId: 'consumerId',
  billMonth: 'billMonth',
  billYear: 'billYear',
  fromDate: 'fromDate',
  toDate: 'toDate',
  dueDate: 'dueDate',
  previousReading: 'previousReading',
  currentReading: 'currentReading',
  unitsConsumed: 'unitsConsumed',
  fixedCharge: 'fixedCharge',
  energyCharge: 'energyCharge',
  powerFactorCharge: 'powerFactorCharge',
  otherCharges: 'otherCharges',
  subTotal: 'subTotal',
  taxes: 'taxes',
  totalAmount: 'totalAmount',
  status: 'status',
  isPaid: 'isPaid',
  paidAmount: 'paidAmount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Consumer_documentsScalarFieldEnum = {
  id: 'id',
  consumerId: 'consumerId',
  type: 'type',
  number: 'number',
  fileUrl: 'fileUrl',
  verificationStatus: 'verificationStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConsumersScalarFieldEnum = {
  id: 'id',
  consumerNumber: 'consumerNumber',
  name: 'name',
  email: 'email',
  primaryPhone: 'primaryPhone',
  alternatePhone: 'alternatePhone',
  idType: 'idType',
  idNumber: 'idNumber',
  connectionType: 'connectionType',
  category: 'category',
  sanctionedLoad: 'sanctionedLoad',
  connectionDate: 'connectionDate',
  locationId: 'locationId',
  billingCycle: 'billingCycle',
  billDeliveryMode: 'billDeliveryMode',
  defaultPaymentMethod: 'defaultPaymentMethod',
  creditScore: 'creditScore',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Current_transformersScalarFieldEnum = {
  id: 'id',
  meterId: 'meterId',
  serialNumber: 'serialNumber',
  manufacturer: 'manufacturer',
  model: 'model',
  ratedPrimary: 'ratedPrimary',
  ratedSecondary: 'ratedSecondary',
  accuracyClass: 'accuracyClass',
  burden: 'burden',
  installationDate: 'installationDate',
  lastTestedDate: 'lastTestedDate',
  nextTestDue: 'nextTestDue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DepartmentsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  parentId: 'parentId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Dtr_faultsScalarFieldEnum = {
  id: 'id',
  dtrId: 'dtrId',
  faultType: 'faultType',
  severity: 'severity',
  occuredAt: 'occuredAt',
  resolvedAt: 'resolvedAt',
  description: 'description',
  rootCause: 'rootCause',
  resolution: 'resolution',
  affectedMeters: 'affectedMeters',
  outageMinutes: 'outageMinutes',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Dtr_maintenanceScalarFieldEnum = {
  id: 'id',
  dtrId: 'dtrId',
  maintenanceType: 'maintenanceType',
  scheduledDate: 'scheduledDate',
  completedDate: 'completedDate',
  workDone: 'workDone',
  findings: 'findings',
  recommendations: 'recommendations',
  oilDielectricTest: 'oilDielectricTest',
  oilAcidityTest: 'oilAcidityTest',
  moistureContent: 'moistureContent',
  performedBy: 'performedBy',
  verifiedBy: 'verifiedBy',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Dtr_readingsScalarFieldEnum = {
  id: 'id',
  dtrId: 'dtrId',
  readingDate: 'readingDate',
  readingType: 'readingType',
  loadKVA: 'loadKVA',
  loadPercentage: 'loadPercentage',
  primaryVoltage: 'primaryVoltage',
  secondaryVoltage: 'secondaryVoltage',
  primaryCurrent: 'primaryCurrent',
  secondaryCurrent: 'secondaryCurrent',
  powerFactor: 'powerFactor',
  oilTemperature: 'oilTemperature',
  windingTemperature: 'windingTemperature',
  ambientTemperature: 'ambientTemperature',
  frequency: 'frequency',
  voltageUnbalance: 'voltageUnbalance',
  currentUnbalance: 'currentUnbalance',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DtrsScalarFieldEnum = {
  id: 'id',
  dtrNumber: 'dtrNumber',
  serialNumber: 'serialNumber',
  manufacturer: 'manufacturer',
  model: 'model',
  capacity: 'capacity',
  type: 'type',
  phase: 'phase',
  primaryVoltage: 'primaryVoltage',
  secondaryVoltage: 'secondaryVoltage',
  frequency: 'frequency',
  impedance: 'impedance',
  coolingType: 'coolingType',
  oilType: 'oilType',
  oilCapacity: 'oilCapacity',
  locationId: 'locationId',
  installationDate: 'installationDate',
  commissionDate: 'commissionDate',
  lastMaintenanceDate: 'lastMaintenanceDate',
  maxLoadLimit: 'maxLoadLimit',
  alarmThreshold: 'alarmThreshold',
  tripThreshold: 'tripThreshold',
  status: 'status',
  healthIndex: 'healthIndex',
  temperature: 'temperature',
  loadPercentage: 'loadPercentage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Location_typesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  level: 'level',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LocationsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  locationTypeId: 'locationTypeId',
  parentId: 'parentId',
  latitude: 'latitude',
  longitude: 'longitude',
  address: 'address',
  pincode: 'pincode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Login_historyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  status: 'status',
  ipAddress: 'ipAddress',
  deviceInfo: 'deviceInfo',
  location: 'location',
  failureReason: 'failureReason',
  createdAt: 'createdAt'
};

exports.Prisma.Meter_configurationsScalarFieldEnum = {
  id: 'id',
  meterId: 'meterId',
  ctRatio: 'ctRatio',
  ctRatioPrimary: 'ctRatioPrimary',
  ctRatioSecondary: 'ctRatioSecondary',
  adoptedCTRatio: 'adoptedCTRatio',
  ctAccuracyClass: 'ctAccuracyClass',
  ctBurden: 'ctBurden',
  ptRatio: 'ptRatio',
  ptRatioPrimary: 'ptRatioPrimary',
  ptRatioSecondary: 'ptRatioSecondary',
  adoptedPTRatio: 'adoptedPTRatio',
  ptAccuracyClass: 'ptAccuracyClass',
  ptBurden: 'ptBurden',
  mf: 'mf',
  vmf: 'vmf',
  cmf: 'cmf',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Meter_readingsScalarFieldEnum = {
  id: 'id',
  meterId: 'meterId',
  readingDate: 'readingDate',
  readingType: 'readingType',
  readingSource: 'readingSource',
  currentReading: 'currentReading',
  previousReading: 'previousReading',
  consumption: 'consumption',
  kWh: 'kWh',
  kVAh: 'kVAh',
  kVARh: 'kVARh',
  powerFactor: 'powerFactor',
  averagePF: 'averagePF',
  minimumPF: 'minimumPF',
  voltageR: 'voltageR',
  voltageY: 'voltageY',
  voltageB: 'voltageB',
  averageVoltage: 'averageVoltage',
  currentR: 'currentR',
  currentY: 'currentY',
  currentB: 'currentB',
  averageCurrent: 'averageCurrent',
  isValid: 'isValid',
  validatedBy: 'validatedBy',
  validatedAt: 'validatedAt',
  billId: 'billId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  kVA: 'kVA',
  kW: 'kW',
  bphPowerFactor: 'bphPowerFactor',
  frequency: 'frequency',
  rphPowerFactor: 'rphPowerFactor',
  yphPowerFactor: 'yphPowerFactor'
};

exports.Prisma.MetersScalarFieldEnum = {
  id: 'id',
  meterNumber: 'meterNumber',
  serialNumber: 'serialNumber',
  manufacturer: 'manufacturer',
  model: 'model',
  type: 'type',
  phase: 'phase',
  status: 'status',
  isInUse: 'isInUse',
  installationDate: 'installationDate',
  lastMaintenanceDate: 'lastMaintenanceDate',
  decommissionDate: 'decommissionDate',
  locationId: 'locationId',
  dtrId: 'dtrId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NotificationsScalarFieldEnum = {
  id: 'id',
  consumerId: 'consumerId',
  type: 'type',
  title: 'title',
  message: 'message',
  priority: 'priority',
  channels: 'channels',
  status: 'status',
  readAt: 'readAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentsScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  billId: 'billId',
  amount: 'amount',
  paymentMode: 'paymentMode',
  paymentStatus: 'paymentStatus',
  gatewayResponse: 'gatewayResponse',
  receiptNumber: 'receiptNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PermissionsScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Potential_transformersScalarFieldEnum = {
  id: 'id',
  meterId: 'meterId',
  serialNumber: 'serialNumber',
  manufacturer: 'manufacturer',
  model: 'model',
  ratedPrimary: 'ratedPrimary',
  ratedSecondary: 'ratedSecondary',
  accuracyClass: 'accuracyClass',
  burden: 'burden',
  installationDate: 'installationDate',
  lastTestedDate: 'lastTestedDate',
  nextTestDue: 'nextTestDue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Role_permissionsScalarFieldEnum = {
  id: 'id',
  roleId: 'roleId',
  permissionId: 'permissionId',
  isGranted: 'isGranted',
  restrictions: 'restrictions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RolesScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  level: 'level',
  isSystem: 'isSystem',
  isActive: 'isActive',
  accessLevel: 'accessLevel',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TicketsScalarFieldEnum = {
  id: 'id',
  ticketNumber: 'ticketNumber',
  dtrId: 'dtrId',
  raisedById: 'raisedById',
  assignedToId: 'assignedToId',
  type: 'type',
  category: 'category',
  priority: 'priority',
  status: 'status',
  subject: 'subject',
  description: 'description',
  resolution: 'resolution',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.User_activity_logsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  action: 'action',
  details: 'details',
  ipAddress: 'ipAddress',
  createdAt: 'createdAt'
};

exports.Prisma.User_permissionsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  permissionId: 'permissionId',
  isGranted: 'isGranted',
  reason: 'reason',
  validFrom: 'validFrom',
  validUntil: 'validUntil',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.User_sessionsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  sessionToken: 'sessionToken',
  deviceInfo: 'deviceInfo',
  ipAddress: 'ipAddress',
  location: 'location',
  isActive: 'isActive',
  lastActivityAt: 'lastActivityAt',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Refresh_tokensScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  token: 'token',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  username: 'username',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  phone: 'phone',
  profileImage: 'profileImage',
  isActive: 'isActive',
  isLocked: 'isLocked',
  lastLoginAt: 'lastLoginAt',
  passwordChangedAt: 'passwordChangedAt',
  failedLoginAttempts: 'failedLoginAttempts',
  lockoutUntil: 'lockoutUntil',
  departmentId: 'departmentId',
  roleId: 'roleId',
  locationId: 'locationId',
  accessLevel: 'accessLevel',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdBy: 'createdBy',
  updatedBy: 'updatedBy'
};

exports.Prisma.Raw_xml_importScalarFieldEnum = {
  id: 'id',
  doc: 'doc',
  imported_at: 'imported_at'
};

exports.Prisma.Prepaid_accountsScalarFieldEnum = {
  id: 'id',
  consumerId: 'consumerId',
  accountNumber: 'accountNumber',
  currentBalance: 'currentBalance',
  totalRecharged: 'totalRecharged',
  totalConsumed: 'totalConsumed',
  isActive: 'isActive',
  isBlocked: 'isBlocked',
  blockReason: 'blockReason',
  blockedAt: 'blockedAt',
  blockedBy: 'blockedBy',
  lowBalanceThreshold: 'lowBalanceThreshold',
  emergencyThreshold: 'emergencyThreshold',
  autoRechargeEnabled: 'autoRechargeEnabled',
  autoRechargeAmount: 'autoRechargeAmount',
  autoRechargeThreshold: 'autoRechargeThreshold',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Prepaid_alertsScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  alertType: 'alertType',
  alertLevel: 'alertLevel',
  message: 'message',
  isRead: 'isRead',
  readAt: 'readAt',
  balanceAtAlert: 'balanceAtAlert',
  consumptionAtAlert: 'consumptionAtAlert',
  thresholdValue: 'thresholdValue',
  createdAt: 'createdAt'
};

exports.Prisma.Prepaid_rechargesScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  rechargeId: 'rechargeId',
  amount: 'amount',
  paymentMethod: 'paymentMethod',
  paymentStatus: 'paymentStatus',
  gatewayName: 'gatewayName',
  gatewayTransactionId: 'gatewayTransactionId',
  gatewayResponse: 'gatewayResponse',
  rechargeType: 'rechargeType',
  rechargeSource: 'rechargeSource',
  isPromotional: 'isPromotional',
  promotionalCode: 'promotionalCode',
  discountAmount: 'discountAmount',
  bonusAmount: 'bonusAmount',
  receiptNumber: 'receiptNumber',
  receiptUrl: 'receiptUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Prepaid_transactionsScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  transactionId: 'transactionId',
  transactionType: 'transactionType',
  amount: 'amount',
  balanceBefore: 'balanceBefore',
  balanceAfter: 'balanceAfter',
  consumptionKWh: 'consumptionKWh',
  ratePerUnit: 'ratePerUnit',
  fixedCharges: 'fixedCharges',
  taxes: 'taxes',
  readingId: 'readingId',
  status: 'status',
  failureReason: 'failureReason',
  description: 'description',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Tamper_code_descScalarFieldEnum = {
  id: 'id',
  tamperCode: 'tamperCode',
  tamperDesc: 'tamperDesc',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.Tamper_eventsScalarFieldEnum = {
  id: 'id',
  meterId: 'meterId',
  tamperDatetime: 'tamperDatetime',
  tamperType: 'tamperType',
  tamperStatus: 'tamperStatus',
  avgCurrent: 'avgCurrent',
  avgVoltage: 'avgVoltage',
  avgPowerFactor: 'avgPowerFactor',
  frequency: 'frequency',
  kwh: 'kwh',
  kwhExport: 'kwhExport',
  kwhImport: 'kwhImport',
  kwhNet: 'kwhNet',
  kwhTotal: 'kwhTotal',
  kwExport: 'kwExport',
  kwImport: 'kwImport',
  kvaExport: 'kvaExport',
  kvaImport: 'kvaImport',
  voltageR: 'voltageR',
  voltageY: 'voltageY',
  voltageB: 'voltageB',
  currentR: 'currentR',
  currentY: 'currentY',
  currentB: 'currentB',
  powerFactorR: 'powerFactorR',
  powerFactorY: 'powerFactorY',
  powerFactorB: 'powerFactorB',
  tamperCount: 'tamperCount',
  param1: 'param1',
  param2: 'param2',
  param3: 'param3',
  param4: 'param4',
  param5: 'param5',
  isProcessed: 'isProcessed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TariffScalarFieldEnum = {
  id: 'id',
  client_id: 'client_id',
  category: 'category',
  tariff_name: 'tariff_name',
  type: 'type',
  device: 'device',
  min_demand: 'min_demand',
  min_demand_unit_rate: 'min_demand_unit_rate',
  min_demand_excess_unit_rate: 'min_demand_excess_unit_rate',
  base_unit_rate: 'base_unit_rate',
  elec_duty_unit_rate: 'elec_duty_unit_rate',
  ims: 'ims',
  gst: 'gst',
  valid_from: 'valid_from',
  valid_to: 'valid_to',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Tariff_slabsScalarFieldEnum = {
  id: 'id',
  tariff_id: 'tariff_id',
  slab_order: 'slab_order',
  unit_limit: 'unit_limit',
  unit_rate: 'unit_rate',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.BillStatus = exports.$Enums.BillStatus = {
  GENERATED: 'GENERATED',
  VERIFIED: 'VERIFIED',
  APPROVED: 'APPROVED',
  DISPUTED: 'DISPUTED',
  CANCELLED: 'CANCELLED'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  ID_PROOF: 'ID_PROOF',
  ADDRESS_PROOF: 'ADDRESS_PROOF',
  OWNERSHIP_PROOF: 'OWNERSHIP_PROOF',
  NOC: 'NOC',
  OTHER: 'OTHER'
};

exports.VerificationStatus = exports.$Enums.VerificationStatus = {
  PENDING: 'PENDING',
  VERIFIED: 'VERIFIED',
  REJECTED: 'REJECTED'
};

exports.IdType = exports.$Enums.IdType = {
  PASSPORT: 'PASSPORT',
  DRIVING_LICENSE: 'DRIVING_LICENSE',
  NATIONAL_ID: 'NATIONAL_ID',
  VOTER_ID: 'VOTER_ID',
  TAX_ID: 'TAX_ID'
};

exports.ConnectionType = exports.$Enums.ConnectionType = {
  RESIDENTIAL: 'RESIDENTIAL',
  COMMERCIAL: 'COMMERCIAL',
  INDUSTRIAL: 'INDUSTRIAL',
  AGRICULTURAL: 'AGRICULTURAL'
};

exports.ConsumerCategory = exports.$Enums.ConsumerCategory = {
  DOMESTIC: 'DOMESTIC',
  SMALL_COMMERCIAL: 'SMALL_COMMERCIAL',
  LARGE_COMMERCIAL: 'LARGE_COMMERCIAL',
  INDUSTRIAL: 'INDUSTRIAL',
  AGRICULTURAL: 'AGRICULTURAL',
  GOVERNMENT: 'GOVERNMENT'
};

exports.BillingCycle = exports.$Enums.BillingCycle = {
  MONTHLY: 'MONTHLY',
  BIMONTHLY: 'BIMONTHLY',
  QUARTERLY: 'QUARTERLY'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  CASH: 'CASH',
  CHEQUE: 'CHEQUE',
  CARD: 'CARD',
  UPI: 'UPI',
  NETBANKING: 'NETBANKING',
  WALLET: 'WALLET'
};

exports.BillDeliveryMode = exports.$Enums.BillDeliveryMode = {
  EMAIL: 'EMAIL',
  SMS: 'SMS',
  WHATSAPP: 'WHATSAPP',
  PHYSICAL: 'PHYSICAL'
};

exports.FaultType = exports.$Enums.FaultType = {
  OVERLOAD: 'OVERLOAD',
  SHORT_CIRCUIT: 'SHORT_CIRCUIT',
  EARTH_FAULT: 'EARTH_FAULT',
  OIL_LEAK: 'OIL_LEAK',
  HIGH_TEMPERATURE: 'HIGH_TEMPERATURE',
  LOW_OIL: 'LOW_OIL',
  BUSHING_FAILURE: 'BUSHING_FAILURE',
  WINDING_FAILURE: 'WINDING_FAILURE',
  OTHER: 'OTHER'
};

exports.FaultSeverity = exports.$Enums.FaultSeverity = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.FaultStatus = exports.$Enums.FaultStatus = {
  DETECTED: 'DETECTED',
  ANALYZING: 'ANALYZING',
  REPAIRING: 'REPAIRING',
  RESOLVED: 'RESOLVED',
  UNRESOLVED: 'UNRESOLVED'
};

exports.MaintenanceType = exports.$Enums.MaintenanceType = {
  ROUTINE: 'ROUTINE',
  PREVENTIVE: 'PREVENTIVE',
  CORRECTIVE: 'CORRECTIVE',
  EMERGENCY: 'EMERGENCY',
  OIL_TEST: 'OIL_TEST',
  INSPECTION: 'INSPECTION'
};

exports.MaintenanceStatus = exports.$Enums.MaintenanceStatus = {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED',
  DEFERRED: 'DEFERRED'
};

exports.DTRReadingType = exports.$Enums.DTRReadingType = {
  REGULAR: 'REGULAR',
  SPECIAL: 'SPECIAL',
  ALARM: 'ALARM',
  FAULT: 'FAULT'
};

exports.DTRType = exports.$Enums.DTRType = {
  DISTRIBUTION: 'DISTRIBUTION',
  POWER: 'POWER',
  AUTO: 'AUTO',
  SPECIAL_PURPOSE: 'SPECIAL_PURPOSE'
};

exports.CoolingType = exports.$Enums.CoolingType = {
  ONAN: 'ONAN',
  ONAF: 'ONAF',
  OFAF: 'OFAF',
  ODAF: 'ODAF'
};

exports.OilType = exports.$Enums.OilType = {
  MINERAL: 'MINERAL',
  SYNTHETIC: 'SYNTHETIC',
  BIO_BASED: 'BIO_BASED',
  SILICONE: 'SILICONE'
};

exports.DTRStatus = exports.$Enums.DTRStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  MAINTENANCE: 'MAINTENANCE',
  FAULTY: 'FAULTY',
  OVERLOADED: 'OVERLOADED',
  DECOMMISSIONED: 'DECOMMISSIONED'
};

exports.ReadingType = exports.$Enums.ReadingType = {
  REGULAR: 'REGULAR',
  SPECIAL: 'SPECIAL',
  PROVISIONAL: 'PROVISIONAL',
  FINAL: 'FINAL'
};

exports.ReadingSource = exports.$Enums.ReadingSource = {
  AMR: 'AMR',
  MANUAL: 'MANUAL',
  MOBILE_APP: 'MOBILE_APP',
  ESTIMATED: 'ESTIMATED'
};

exports.MeterType = exports.$Enums.MeterType = {
  PREPAID: 'PREPAID',
  POSTPAID: 'POSTPAID'
};

exports.MeterStatus = exports.$Enums.MeterStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  FAULTY: 'FAULTY',
  DISCONNECTED: 'DISCONNECTED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  BILL_GENERATED: 'BILL_GENERATED',
  PAYMENT_DUE: 'PAYMENT_DUE',
  PAYMENT_RECEIVED: 'PAYMENT_RECEIVED',
  LOW_BALANCE: 'LOW_BALANCE',
  METER_DISCONNECTED: 'METER_DISCONNECTED'
};

exports.NotificationPriority = exports.$Enums.NotificationPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.NotificationStatus = exports.$Enums.NotificationStatus = {
  PENDING: 'PENDING',
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  FAILED: 'FAILED'
};

exports.NotificationChannel = exports.$Enums.NotificationChannel = {
  SMS: 'SMS',
  EMAIL: 'EMAIL',
  PUSH: 'PUSH',
  WHATSAPP: 'WHATSAPP'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  SUCCESS: 'SUCCESS',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.AccessLevel = exports.$Enums.AccessLevel = {
  RESTRICTED: 'RESTRICTED',
  NORMAL: 'NORMAL',
  ELEVATED: 'ELEVATED',
  ADMIN: 'ADMIN',
  SUPER_ADMIN: 'SUPER_ADMIN'
};

exports.TicketType = exports.$Enums.TicketType = {
  COMPLAINT: 'COMPLAINT',
  SERVICE_REQUEST: 'SERVICE_REQUEST',
  INQUIRY: 'INQUIRY'
};

exports.TicketCategory = exports.$Enums.TicketCategory = {
  BILLING: 'BILLING',
  METER: 'METER',
  CONNECTION: 'CONNECTION',
  TECHNICAL: 'TECHNICAL',
  OTHER: 'OTHER'
};

exports.TicketPriority = exports.$Enums.TicketPriority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.TicketStatus = exports.$Enums.TicketStatus = {
  OPEN: 'OPEN',
  ASSIGNED: 'ASSIGNED',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  CLOSED: 'CLOSED'
};

exports.PrepaidAlertType = exports.$Enums.PrepaidAlertType = {
  LOW_BALANCE: 'LOW_BALANCE',
  EMERGENCY_LOW: 'EMERGENCY_LOW',
  CONSUMPTION_HIGH: 'CONSUMPTION_HIGH',
  RECHARGE_SUCCESS: 'RECHARGE_SUCCESS',
  RECHARGE_FAILED: 'RECHARGE_FAILED',
  DISCONNECTION_WARNING: 'DISCONNECTION_WARNING',
  DISCONNECTED: 'DISCONNECTED',
  RECONNECTED: 'RECONNECTED'
};

exports.PrepaidAlertLevel = exports.$Enums.PrepaidAlertLevel = {
  INFO: 'INFO',
  WARNING: 'WARNING',
  CRITICAL: 'CRITICAL',
  EMERGENCY: 'EMERGENCY'
};

exports.PrepaidRechargeType = exports.$Enums.PrepaidRechargeType = {
  MANUAL: 'MANUAL',
  AUTO: 'AUTO',
  PROMOTIONAL: 'PROMOTIONAL',
  REFUND: 'REFUND',
  ADMIN: 'ADMIN'
};

exports.PrepaidRechargeSource = exports.$Enums.PrepaidRechargeSource = {
  ONLINE: 'ONLINE',
  OFFLINE: 'OFFLINE',
  MOBILE_APP: 'MOBILE_APP',
  SMS: 'SMS',
  USSD: 'USSD',
  AGENT: 'AGENT'
};

exports.PrepaidTransactionType = exports.$Enums.PrepaidTransactionType = {
  RECHARGE: 'RECHARGE',
  CONSUMPTION: 'CONSUMPTION',
  ADJUSTMENT: 'ADJUSTMENT',
  REFUND: 'REFUND',
  PENALTY: 'PENALTY',
  BONUS: 'BONUS',
  EXPIRY: 'EXPIRY',
  TRANSFER: 'TRANSFER'
};

exports.PrepaidTransactionStatus = exports.$Enums.PrepaidTransactionStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED',
  REVERSED: 'REVERSED'
};

exports.TamperType = exports.$Enums.TamperType = {
  METER_BYPASS: 'METER_BYPASS',
  MAGNETIC_TAMPER: 'MAGNETIC_TAMPER',
  COVER_OPEN: 'COVER_OPEN',
  TERMINAL_TAMPER: 'TERMINAL_TAMPER',
  REVERSE_POLARITY: 'REVERSE_POLARITY',
  PHASE_MISMATCH: 'PHASE_MISMATCH',
  CURRENT_SHUNT: 'CURRENT_SHUNT',
  VOLTAGE_SHUNT: 'VOLTAGE_SHUNT',
  POWER_FAILURE: 'POWER_FAILURE',
  NO_LOAD: 'NO_LOAD',
  OTHER: 'OTHER'
};

exports.TamperStatus = exports.$Enums.TamperStatus = {
  DETECTED: 'DETECTED',
  CONFIRMED: 'CONFIRMED',
  RESOLVED: 'RESOLVED',
  FALSE_ALARM: 'FALSE_ALARM',
  INVESTIGATING: 'INVESTIGATING'
};

exports.Prisma.ModelName = {
  bills: 'bills',
  consumer_documents: 'consumer_documents',
  consumers: 'consumers',
  current_transformers: 'current_transformers',
  departments: 'departments',
  dtr_faults: 'dtr_faults',
  dtr_maintenance: 'dtr_maintenance',
  dtr_readings: 'dtr_readings',
  dtrs: 'dtrs',
  location_types: 'location_types',
  locations: 'locations',
  login_history: 'login_history',
  meter_configurations: 'meter_configurations',
  meter_readings: 'meter_readings',
  meters: 'meters',
  notifications: 'notifications',
  payments: 'payments',
  permissions: 'permissions',
  potential_transformers: 'potential_transformers',
  role_permissions: 'role_permissions',
  roles: 'roles',
  tickets: 'tickets',
  user_activity_logs: 'user_activity_logs',
  user_permissions: 'user_permissions',
  user_sessions: 'user_sessions',
  refresh_tokens: 'refresh_tokens',
  users: 'users',
  raw_xml_import: 'raw_xml_import',
  prepaid_accounts: 'prepaid_accounts',
  prepaid_alerts: 'prepaid_alerts',
  prepaid_recharges: 'prepaid_recharges',
  prepaid_transactions: 'prepaid_transactions',
  tamper_code_desc: 'tamper_code_desc',
  tamper_events: 'tamper_events',
  tariff: 'tariff',
  tariff_slabs: 'tariff_slabs'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
